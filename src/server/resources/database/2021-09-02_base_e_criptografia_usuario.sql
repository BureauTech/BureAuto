-- ##################### inicio modulos ######################## --

create extension if not exists pgcrypto;

-- ##################### fim modulos ######################## --



-- ##################### inicio tabelas ######################## --

-- drop table usuario cascade;

create table usuario (
    usu_cod bigint not null generated by default as identity,
    usu_nome varchar not null,
    usu_is_cpf boolean not null,
    usu_documento varchar not null,
    usu_apelido varchar not null,
    usu_telefone varchar not null,
    usu_endereco varchar not null,
    usu_email varchar not null,
	usu_senha varchar not null,
	usu_is_temp boolean not null,
    constraint usuario_usu_cod_pkey primary key (usu_cod)
);

-- drop table anuncio;

create table anuncio (
    anu_cod varchar not null,
    anu_usu_cod bigint not null,
    anu_descricao_marca varchar,
    anu_nome_fabricante varchar,
    anu_descricao_modelo varchar,
    anu_valor double precision,
    anu_favoritos integer,
    anu_visualizacoes integer,
    anu_ano_modelo integer,
    anu_ano_fabricacao integer,
	anu_imagem bytea[],
	anu_status varchar,
    constraint anuncio_pkey primary key (anu_cod),
    constraint anuncio_usu_cod_fkey foreign key (anu_usu_cod) references usuario (usu_cod)
);

create index fki_fk_usu_cod
on public.anuncio using btree
(anu_usu_cod asc nulls last)
tablespace pg_default;

-- drop table criptografia;

create table criptografia (
	cri_usu_cod bigint not null,
	cri_chave varchar,
	constraint criptografia_cri_usu_cod_pkey primary key (cri_usu_cod),
	constraint criptografia_cri_usu_cod_fkey foreign key (cri_usu_cod) references usuario (usu_cod) initially deferred,
	constraint criptografia_cri_chave_ukey unique (cri_chave)
);

-- ##################### fim tabelas ######################## --



-- ##################### inicio triggers ######################## --

create or replace function cadastrar_usuario()
returns trigger as $$
declare
	chave varchar := crypt(gen_random_uuid()::varchar, gen_salt('bf', 8));
begin
	insert into criptografia(cri_usu_cod, cri_chave) values (new.usu_cod, chave);
  	new.usu_nome := encrypt(new.usu_nome::bytea, chave::bytea, 'aes')::varchar;
  	new.usu_documento := encrypt(new.usu_documento::bytea, chave::bytea, 'aes')::varchar;
  	new.usu_apelido := encrypt(new.usu_apelido::bytea, chave::bytea, 'aes')::varchar;
  	new.usu_telefone := encrypt(new.usu_telefone::bytea, chave::bytea, 'aes')::varchar;
  	new.usu_endereco := encrypt(new.usu_endereco::bytea, chave::bytea, 'aes')::varchar;
  	new.usu_email := encrypt(new.usu_email::bytea, chave::bytea, 'aes')::varchar;
	new.usu_senha := sha256((new.usu_senha || chave)::bytea)::varchar;
	new.usu_is_temp := true;
	return new;
end;
$$ language plpgsql;

-- drop trigger cadastrar_usuario on usuario;

create trigger cadastrar_usuario
before insert on usuario
for each row
execute procedure cadastrar_usuario();

create or replace function atualizar_usuario()
returns trigger as $$
declare
	chave varchar := (select cri_chave from criptografia where cri_usu_cod = new.usu_cod);
begin
	if new.usu_nome not like '\\x%' then
		new.usu_nome := encrypt(new.usu_nome::bytea, chave::bytea, 'aes')::varchar;
	end if;

	if new.usu_documento not like '\\x%' then
  		new.usu_documento := encrypt(new.usu_documento::bytea, chave::bytea, 'aes')::varchar;
  	end if;

	if new.usu_apelido not like '\\x%' then
  		new.usu_apelido := encrypt(new.usu_apelido::bytea, chave::bytea, 'aes')::varchar;
  	end if;
  
  	if new.usu_telefone not like '\\x%' then
  		new.usu_telefone := encrypt(new.usu_telefone::bytea, chave::bytea, 'aes')::varchar;
  	end if;

  	if new.usu_endereco not like '\\x%' then
  		new.usu_endereco := encrypt(new.usu_endereco::bytea, chave::bytea, 'aes')::varchar;
  	end if;
  
  	if new.usu_email not like '\\x%' then
  		new.usu_email := encrypt(new.usu_email::bytea, chave::bytea, 'aes')::varchar;
  	end if;
  
  	if new.usu_senha not like '\\x%' then
		new.usu_senha := sha256((new.usu_senha || chave)::bytea)::varchar;
		if old.usu_is_temp then
			new.usu_is_temp := false;
		end if;
	end if;

	return new;
end;
$$ language plpgsql;

-- drop trigger atualizar_usuario on usuario;

create trigger atualizar_usuario
before update on usuario
for each row
execute procedure atualizar_usuario();

create or replace function descriptografar(criptografado varchar, chave_aes varchar)
returns varchar as $$
begin
	if chave_aes is null then
		return 'Desconhecido';
	else
		return convert_from(decrypt(criptografado::bytea, chave_aes::bytea, 'aes'), 'utf-8');
	end if;
exception
	when character_not_in_repertoire then
		return 'Desconhecido';
end;
$$ language 'plpgsql';

create or replace function descriptografar_usuario(fun_usu_cod bigint)
returns table (
	usu_cod varchar,
	usu_nome varchar,
	usu_is_cpf boolean,
	usu_documento varchar,
	usu_apelido varchar,
	usu_telefone varchar,
	usu_endereco varchar,
	usu_email varchar,
	usu_senha varchar,
	usu_is_temp boolean
) as $$
declare
    usuario record;
begin
    for usuario in (select * from usuario u join criptografia c ON u.usu_cod = c.cri_usu_cod where u.usu_cod = fun_usu_cod)
    loop
        usu_cod := usuario.usu_cod;
		usu_nome := descriptografar(usuario.usu_nome, usuario.cri_chave);
		usu_is_cpf := usuario.usu_is_cpf;
		usu_documento := descriptografar(usuario.usu_documento, usuario.cri_chave);
		usu_apelido := descriptografar(usuario.usu_apelido, usuario.cri_chave);
		usu_telefone := descriptografar(usuario.usu_telefone, usuario.cri_chave);
		usu_endereco := descriptografar(usuario.usu_endereco, usuario.cri_chave);
		usu_email := descriptografar(usuario.usu_email, usuario.cri_chave);
		usu_senha := usuario.usu_senha;
		usu_is_temp := usuario.usu_is_temp;
        return next;
    end loop;
end;
$$ language 'plpgsql';

create or replace function descriptografar_usuarios()
returns table (
	usu_cod varchar,
	usu_nome varchar,
	usu_is_cpf boolean,
	usu_documento varchar,
	usu_apelido varchar,
	usu_telefone varchar,
	usu_endereco varchar,
	usu_email varchar,
	usu_senha varchar,
	usu_is_temp boolean
) as $$
declare
    usuario record;
begin
    for usuario in (select * from usuario u join criptografia c ON u.usu_cod = c.cri_usu_cod)
    loop
        usu_cod := usuario.usu_cod;
		usu_nome := descriptografar(usuario.usu_nome, usuario.cri_chave);
		usu_is_cpf := usuario.usu_is_cpf;
		usu_documento := descriptografar(usuario.usu_documento, usuario.cri_chave);
		usu_apelido := descriptografar(usuario.usu_apelido, usuario.cri_chave);
		usu_telefone := descriptografar(usuario.usu_telefone, usuario.cri_chave);
		usu_endereco := descriptografar(usuario.usu_endereco, usuario.cri_chave);
		usu_email := descriptografar(usuario.usu_email, usuario.cri_chave);
		usu_senha := usuario.usu_senha;
		usu_is_temp := usuario.usu_is_temp;
        return next;
    end loop;
end;
$$ language 'plpgsql';

-- ##################### fim triggers ######################## --